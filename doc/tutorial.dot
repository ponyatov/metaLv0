digraph {
    rankdir=LR;
    host -> script [label="optional:\nPLY parser"]
    host -> metaL [color=red,label="direct object graph construction\nmetaL-in-Python"];
    script -> metaL [label="AST\nevaluation"];
    metaL -> target [color=blue,label="model\ncompiler"];
    target -> production [label="backend compiler\nGCC/TCC, javac,.."]

    metaL -> transformation [color=darkgreen,xlabel="functions\nmethods\ntransformation\ndescriptions"]
    transformation -> metaL [color=darkgreen,xlabel="self-modification\nand inference"];

    transformation [color=darkgreen,label="transformation\nknowlege graph is\nable to modify itself\n via interpretation"]

    metaL -> host [dir=both,color=darkgreen,label="graph transformations\nwritten in Python"];

    host [label="host:\nPython"];
    script [label="metaL script\n(REPL/CLI, .ini files)"];
    metaL [label="metaL models\ninterpretable object graph\nknowledge base\ntransformations in metaL"];
    production [label="production\ndeployment\ndistribution\npackaging"]

    target [label="target:\nC++,Java,.."];

    php [label="PHP (legacy)\nClojure (JVM world)"];
    php -> metaL [color=red,label="metaL core can be implemented\nin any host language (dynamic & OOP preferred)"];
    legacy -> metaL [dir=both,label="any legacy code can be parsed and imported into model space\nfor analisys, legacy raking, refactoring and redesign\nmetaL-generated code refreshes legacy by hands (using meld tool)\n(consistency provided by model relations and tests)"]
    legacy [label="existing legacy system"]

    metaL -> php [color=blue,label="model elements can be translated to source code\n(including metaL porting itself)"];

    { host; php; legacy; rank=same; }

    metaL -> host [color=blue,label="metaL model can describe self-implementation\nbootstrapping"];

    metaL -> storage [label="sync    "]
    storage -> metaL [xlabel="  recover\nupdate"]
    storage [label="persistent\nstorage\n(Redis, RDBMS,..)"]

    metaL -> other [dir=both,label="distributed\nmessage passing"]

    { storage; metaL; transformation; rank=same; }

    other [label="other metaL\nsystem instance"]
    storage -> other [label="async update"]
    other -> storage [label="distributed via DB"]
    { target; other; sim; rank=same; }

    metaL -> sim [label="model interpreter"]
    sim [label="simulation\nmodel debug"]
    sim -> metaL [label="tracing"]

    team [label="your team\nempoyer\ncomunity"]
    target -> team [label="share generated source code"]
}